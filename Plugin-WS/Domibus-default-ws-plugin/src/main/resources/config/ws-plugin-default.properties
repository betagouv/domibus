

# This file contains all default values for your business processes. Unset properties in the WS plugin properties with
# will be filled in from here.

#Domain is enabled or not (default is true)
wsplugin.domain.enabled=true

#Enable the support for MTOM. Default to false.
wsplugin.mtom.enabled=false

#Enable the schema validation. Default to false.
wsplugin.schema.validation.enabled=false

#The maximum number of pending messages to be listed from the pending messages table. Setting this property is expected to avoid timeouts due to huge resultsets being served.
#Setting this property to zero returns all pending messages
wsplugin.messages.pending.list.max=500

#The maximum number of failed pushed messages to be listed from the backend message table. Setting this property is expected to avoid timeouts due to huge resultsets being served.
#Setting this property to zero returns all pending messages
wsplugin.messages.push.failed.list.max=500

#The maximum number of messages to repushed to the backend. Setting this property is expected to avoid timeouts due to huge resultsets being updated.
#Setting this property to zero returns disable the limit
wsplugin.messages.repush.list.max=100

#The notifications sent by Domibus to the plugin. The following values are possible: MESSAGE_RECEIVED,MESSAGE_FRAGMENT_RECEIVED,MESSAGE_SEND_FAILURE,MESSAGE_FRAGMENT_SEND_FAILURE,MESSAGE_RECEIVED_FAILURE,MESSAGE_FRAGMENT_RECEIVED_FAILURE,MESSAGE_SEND_SUCCESS,MESSAGE_FRAGMENT_SEND_SUCCESS,MESSAGE_STATUS_CHANGE,MESSAGE_FRAGMENT_STATUS_CHANGE,MESSAGE_DELETE_BATCH,MESSAGE_DELETED
wsplugin.messages.notifications=MESSAGE_RECEIVED,MESSAGE_SEND_FAILURE,MESSAGE_RECEIVED_FAILURE,MESSAGE_SEND_SUCCESS,MESSAGE_STATUS_CHANGE

#Timeout values for communication between the ws plugin and the backend service
#ConnectionTimeOut - Specifies the amount of time, in milliseconds, that the consumer will attempt to establish a connection before it times out. 0 is infinite.
wsplugin.dispatcher.connectionTimeout=60000

#ReceiveTimeout - Specifies the amount of time, in milliseconds, that the consumer will wait for a response before it times out. 0 is infinite.
wsplugin.dispatcher.receiveTimeout=60000

#Allows chunking when sending messages to the backend service
wsplugin.dispatcher.allowChunking=false

#If domibus.dispatcher.allowChunking is true, this property sets the threshold at which messages start getting chunked(in bytes). Messages under this limit do not get chunked. Defaults to 100 MB.
wsplugin.dispatcher.chunkingThreshold=104857600

#Specifies if the connection will be kept alive between C2-C1 and C3-C4. Default value is true.
wsplugin.dispatcher.connection.keepAlive=true

# The cron expression used to trigger the worker to send notification to the backend.
# E.g.: 0 0/1 * * * ?
wsplugin.dispatcher.worker.cronExpression=0 0/1 * * * ?

#Queues
# Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
# when sending files
wsplugin.send.queue.concurrency=5-20

# Enable push notification to backend.
# Properties wsplugin.push.rules.X, wsplugin.push.rules.X.recipient, wsplugin.push.rules.X.endpoint,
# wsplugin.push.rules.X.retry and wsplugin.push.rules.X.type needed
# with X finalRecipient
wsplugin.push.enabled=false

# Enable alert when push notification fails to reach the backend. (default= false)
wsplugin.push.alert.active=false

# ---------------------------------- Alerts -----------------------------------
#Alert levels corresponding to a failure to dispatch the notifications to the backend.
#Should be (HIGH, MEDIUM OR LOW)
wsplugin.push.alert.level=MEDIUM

#Messaging alert module mail subject for push notifications to the backend.
wsplugin.push.alert.email.subject=The backend could not be reached

#Messaging alert module mail body for push notifications to the backend.
#{rule.name} is a rule triggered
#{rule.recipient} is the final recipient of the Domibus message linked to the rule
#{rule.endpoint} is the url used to send the failed notifications linked to the rule
#{rule.retry} is the retry pattern for the notification linked to the rule
#{rule.types} is the types handle by the rule linked to the rule
#{message.messageId} is the id of the domibus message
#{message.originalSender} is the original sender of the Domibus message
#{message.messageStatus} is the status of the Domibus message
#{message.type} is the type of the failed notification
wsplugin.push.alert.email.body=The notifications cannot be sent to the backend for rule [{rule.name}], recipient [{rule.recipient}], endpoint [{rule.endpoint}], retry [{rule.retry}], types [{rule.types}]. \n\n For notification: \n domibus message id: [{message.messageId}] originalSender : [{message.originalSender}], messageStatus: [{message.messageStatus}], type: [{message.type}].

#if set to false then the backend would be able to retrieve the same message multiple times and would have to explicitly set the message status to downloaded
wsplugin.push.markAsDownloaded=true
