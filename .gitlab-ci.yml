# This pipeline is inlined here from the Gitlab's own Maven template because including + extending from it is difficult
# given the current support for removing hashes from extended job (cannot simply remove an existing hash like "only" in
# order to replace it with a rules+when:never).

# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

variables:
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  # As of Maven 3.3.0 instead of this you MAY define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # As of Maven 3.6.1, the use of `--no-tranfer-progress` (or `-ntp`) suppresses download and upload messages. The use
  # of the `Slf4jMavenTransferListener` is no longer necessary.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    -DinstallAtEnd=true
    -DdeployAtEnd=true

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
# increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
cache:
  paths:
    - .m2/repository

# To deploy packages from CI, create a `ci_settings.xml` file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` or `main` branch run `mvn deploy` automatically.
deploy-domibus:jdk11:
  stage: deploy
  script:
    - if [ ! -f ci_settings.xml ]; then
      echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
      fi
    - curl -s https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer | bash
    - chmod +x .secure_files/install.sh
    - .secure_files/install.sh
    - sed -i.bak '/<distributionManagement>/,/<\/distributionManagement>/c \
        \<distributionManagement\>\
          \<repository\>\
            \<id\>gitlab-maven\</id\>\
            \<url\>${CI_API_V4_URL}\/projects\/${CI_PROJECT_ID}\/packages\/maven\</url\>\
          \</repository\>\
          \<snapshotRepository\>\
            \<id\>gitlab-maven\</id\>\
            \<url\>${CI_API_V4_URL}\/projects\/${CI_PROJECT_ID}\/packages\/maven\</url\>\
          \</snapshotRepository\>\
        \</distributionManagement\>' pom.xml && cat pom.xml
    - export JAVA_HOME=/home/edelivery/.sdkman/candidates/java/11.0.12-open
    - 'mvn $MAVEN_CLI_OPTS deploy --settings ci_settings.xml'